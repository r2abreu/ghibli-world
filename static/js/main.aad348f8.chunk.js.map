{"version":3,"sources":["api/ghibli.tsx","components/SuggestionList/SuggestionList.tsx","api/youtube.tsx","components/Autocomplete/Autocomplete.tsx","components/OutsideAlerter/OutsideAlerter.tsx","hooks/helpers.tsx","components/SearchBar/SearchBar.tsx","components/Header/Header.tsx","components/Footer/Footer.tsx","components/Layout/Layout.tsx","components/MovieTrailer/MovieTrailer.tsx","components/MovieDetails/MovieDetails.tsx","components/App/App.tsx","index.tsx"],"names":["axios","create","baseURL","SuggestionList","showSuggestions","userInput","filteredSuggestion","activeSuggestion","onClick","length","className","map","suggestion","index","title","Autocomplete","movies","showAutocomplete","onInputChange","useState","setActiveSuggestion","setFilteredSuggestion","setShowSuggestions","event","currentTarget","innerText","Fragment","onSubmit","preventDefault","type","onChange","suggestions","value","filteredSuggestions","filter","toLowerCase","indexOf","onKeyDown","keyCode","placeholder","id","autoComplete","OutsideAlerter","children","hideAutocomplete","wrapperRef","useRef","ref","useEffect","document","addEventListener","current","contains","target","useOutsideAlerter","SearchBar","Header","Footer","Layout","MovieTrailer","width","height","src","frameBorder","allow","allowFullScreen","MovieDetails","movie","selectedMovie","director","release_date","rt_score","producer","description","slice","href","rel","App","term","setMovies","searchGhibli","a","ghibli","response","data","useGhibli","setShowAutocomplete","setUserInput","condition","input","render","getElementById"],"mappings":"2MAEeA,MAAMC,OAAO,CAC3BC,QAAS,oCCwCKC,GCzCAH,IAAMC,OAAO,CAC3BC,QAAS,0CDQa,SAAC,GAA2F,IAAzFE,EAAwF,EAAxFA,gBAAiBC,EAAuE,EAAvEA,UAAWC,EAA4D,EAA5DA,mBAAoBC,EAAwC,EAAxCA,iBAAkBC,EAAsB,EAAtBA,QAC3F,OAAIJ,GAAmBC,EAClBC,EAAmBG,OAErB,oBAAIC,UAAU,cAAd,SACEJ,EAAmBK,KAAI,SAACC,EAAYC,GACpC,IAAIH,EAMJ,OAJIG,IAAUN,IACbG,EAAY,qBAIZ,oBAAIA,UAAWA,EAAkCF,QAASA,EAA1D,SACEI,EAAWE,OADkBF,EAAWE,YAS7C,qBAAKJ,UAAU,iBAAf,SACC,sDAKI,OEgFMK,EA1FM,SAAC,GAAqE,IAAnEC,EAAkE,EAAlEA,OAAQC,EAA0D,EAA1DA,iBAAkBC,EAAwC,EAAxCA,cAAeb,EAAyB,EAAzBA,UAAyB,EAEzCc,mBAAS,GAFgC,mBAEnFZ,EAFmF,KAEjEa,EAFiE,OAIrCD,mBAAwB,IAJa,mBAInFb,EAJmF,KAI/De,EAJ+D,OAM3CF,oBAAS,GANkC,mBAMnFf,EANmF,KAMlEkB,EANkE,KAyBnFd,EAAU,SAACe,GAChBF,EAAsB,IACtBC,GAAmB,GACnBJ,EAAcK,EAAMC,cAAcC,YA4CnC,OACC,eAAC,IAAMC,SAAP,WACC,sBAAMC,SANa,SAACJ,GACrBA,EAAMK,kBAKL,SACC,uBACCC,KAAK,OACLC,SArEa,SAACP,GACjB,IAAMQ,EAAcf,EAEpBE,EAAcK,EAAMC,cAAcQ,OAGlC,IAAMC,EAAsBF,EAAYG,QAAO,SAACtB,GAE/C,OAAOA,EAAWE,MAAMqB,cAAcC,QAAQ/B,EAAU8B,gBAAkB,KAG3Ef,EAAoB,GACpBC,EAAsBY,GACtBX,GAAmB,GACnBJ,EAAcK,EAAMC,cAAcQ,QAwD/BK,UA/Cc,SAACd,GAElB,GAAsB,KAAlBA,EAAMe,QACThB,GAAmB,GACnBJ,EAAcZ,EAAmBC,GAAkBO,YAE7C,GAAsB,KAAlBS,EAAMe,QAAgB,CAChC,GAAyB,IAArB/B,EACH,OAGDa,IAAsBb,QAEhB,GAAsB,KAAlBgB,EAAMe,QAAgB,CAChC,GAAI/B,EAAmB,IAAMD,EAAmBG,OAC/C,OAEDW,IAAsBb,KA+BpByB,MAAO3B,EACPkC,YAAY,oBACZC,GAAG,YACHC,aAAa,UA7BZxB,EAEF,cAAC,EAAD,CACCb,gBAAiBA,EACjBC,UAAWA,EACXC,mBAAoBA,EACpBE,QAASA,EACTD,iBAAkBA,IAIb,SC3EKmC,EANQ,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,SAAUC,EAA+B,EAA/BA,iBAC7BC,EAAaC,iBAAuB,MAE1C,OCRyB,SAACC,EAAgCH,GAC1DI,qBACC,WASCC,SAASC,iBAAiB,aARA,SAAC3B,GACtBwB,EAAII,UAAYJ,EAAII,QAAQC,SAAS7B,EAAM8B,QAC9CT,EAAiB,QAEjBA,EAAiB,aAMpB,CAAEG,EAAKH,IDNRU,CAAkBT,EAAYD,GACvB,qBAAKG,IAAKF,EAAV,SAAuBF,KEShBY,EAfG,SAAC,GAAyF,IAAvFvC,EAAsF,EAAtFA,OAAQC,EAA8E,EAA9EA,iBAAkB2B,EAA4D,EAA5DA,iBAAkB1B,EAA0C,EAA1CA,cAAeb,EAA2B,EAA3BA,UAC/E,OACC,cAAC,IAAMqB,SAAP,UACC,cAAC,EAAD,CAAgBkB,iBAAkBA,EAAlC,SACC,cAAC,EAAD,CACC5B,OAAQA,EACRC,iBAAkBA,EAClBC,cAAeA,EACfb,UAAWA,SCQDmD,EAfA,SAAC,GAAuF,IAAtFxC,EAAqF,EAArFA,OAAQC,EAA6E,EAA7EA,iBAAkB2B,EAA2D,EAA3DA,iBAAkB1B,EAAyC,EAAzCA,cAAeb,EAA0B,EAA1BA,UAC3E,OACC,mCACC,8BACC,gDAED,cAAC,EAAD,CAAWW,OAAQA,EACjBC,iBAAkBA,EAClB2B,iBAAkBA,EAClB1B,cAAeA,EACfb,UAAWA,QCVDoD,EARA,WACd,OACC,iCACC,0BCoBYC,EAdC,SAAC,GAAkG,IAAjG1C,EAAgG,EAAhGA,OAAQC,EAAwF,EAAxFA,iBAAkB2B,EAAsE,EAAtEA,iBAAkB1B,EAAoD,EAApDA,cAAeb,EAAqC,EAArCA,UAAWsC,EAA0B,EAA1BA,SACvF,OACC,eAAC,IAAMjB,SAAP,WACC,cAAC,EAAD,CAAQV,OAAQA,EACdC,iBAAkBA,EAClB2B,iBAAkBA,EAClB1B,cAAeA,EACfb,UAAWA,IACb,+BAAOsC,IACP,cAAC,EAAD,QCcYgB,EA/BM,SAAC,GAAuC,EAArCtD,UAMtB,OAUC,aATA,CASA,UACCuD,MAAM,MACNC,OAAO,MACPC,IAAI,4CACJC,YAAY,IACZC,MAAM,2FACNC,iBAAe,EACfnD,MAAM,wBCaKoD,EA9BM,SAAC,GAAmC,IAAjC7D,EAAgC,EAAhCA,UAAgC,IAArBW,OACDkB,QAAO,SAACiC,GACxC,OAAOA,EAAMrD,QAAUT,KADhB+D,EAD+C,oBAKvD,GAAIA,EAAe,CAAC,IACXtD,EAAmEsD,EAAnEtD,MAAqBuD,GAA8CD,EAA5DE,aAA4DF,EAA9CC,UAAUE,EAAoCH,EAApCG,SAAUC,EAA0BJ,EAA1BI,SAAUC,EAAgBL,EAAhBK,YAC3D,OACC,sBAAK/D,UAAU,gBAAf,UACC,gCACC,8BACC,6BAAKI,MAEN,8BACC,+BAAKyD,EAAL,IAAe,gDAGjB,cAAC,EAAD,CAAclE,UAAWA,IACzB,wCAAOoE,EAAYC,MAAM,EAAG,KAA5B,WAAuC,mBAAGC,KAAI,wCAAmC7D,GAAQuC,OAAO,SAASuB,IAAI,aAAtE,0BACvC,gCACC,2CAAcP,KACd,2CAAcG,WAKjB,OAAO,iDCGMK,EA/BH,WAAO,IAAD,EPiBA,SAACC,GAA0C,IAAD,EAC7B3D,mBAAS,IADoB,mBACnDH,EADmD,KAC3C+D,EAD2C,KAE3D/B,qBAAU,WACTgC,MACE,IAEH,IAAMA,EAAY,uCAAG,4BAAAC,EAAA,sEACGC,EAAOJ,GADV,OACdK,EADc,OAEpBJ,EAAUI,EAASC,MAFC,2CAAH,qDAKlB,MAAO,CAAEpE,EAAQgE,GO3BIK,CAAU,SAAtBrE,EADQ,sBAEiCG,oBAAS,GAF1C,mBAETF,EAFS,KAESqE,EAFT,OAGmBnE,mBAAS,SAH5B,mBAGTd,EAHS,KAGEkF,EAHF,KAiBjB,OACC,cAAC,IAAM7D,SAAP,UACC,cAAC,EAAD,CAAQV,OAAQA,EACdC,iBAAkBA,EAClB2B,iBAhBqB,SAAC4C,GAExBF,EADiB,SAAdE,IAgBDtE,cATkB,SAACuE,GACtBF,EAAaE,IASVpF,UAAWA,EAJb,SAMC,cAAC,EAAD,CAAcA,UAAWA,EAAWW,OAAQA,SC5BhD0E,iBACC,cAAC,IAAMhE,SAAP,UACC,cAAC,EAAD,MAEDuB,SAAS0C,eAAe,W","file":"static/js/main.aad348f8.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport default axios.create({\n\tbaseURL: 'https://ghibliapi.herokuapp.com'\n});\n","import React from 'react';\nimport {Object} from '../Autocomplete';\n\ninterface Params {\n\tshowSuggestions: boolean,\n\tuserInput: string, \n\tfilteredSuggestion: Object[], \n\tactiveSuggestion: number,\n\tonClick: (event: React.MouseEvent<HTMLElement>) => void\n}\n\nconst SuggestionList = ({ showSuggestions, userInput, filteredSuggestion, activeSuggestion, onClick }: Params) => {\n\tif (showSuggestions && userInput) {\n\t\tif (filteredSuggestion.length) {\n\t\t\treturn (\n\t\t\t\t<ul className=\"suggestions\">\n\t\t\t\t\t{filteredSuggestion.map((suggestion, index) => {\n\t\t\t\t\t\tlet className;\n\n\t\t\t\t\t\tif (index === activeSuggestion) {\n\t\t\t\t\t\t\tclassName = 'suggestion-active';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<li className={className} key={suggestion.title} onClick={onClick}>\n\t\t\t\t\t\t\t\t{suggestion.title}\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</ul>\n\t\t\t);\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<div className=\"no-suggestions\">\n\t\t\t\t\t<em>Sin coincidencias.</em>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t} else {\n\t\treturn null;\n\t}\n};\n\nexport default SuggestionList;\n","import axios from 'axios';\n\nexport default axios.create({\n\tbaseURL: 'https://www.googleapis.com/youtube/v3'\n});\n","import React, { useState } from 'react';\nimport SuggestionList from '../SuggestionList';\n\nexport interface Object {\n\tid: string, \n\ttitle: string, \n\tdescription: string, \n\tdirector: string, \n\tproducer: string, \n\trelease_date: string, \n\trt_score: string, \n\tpeople: Array<string>, \n\tspecies: Array<string>, \n\tlocations: Array<string>, \n\tvehicles: Array<string>\n\turl: string\n}\n\n\nexport interface Params {\n\tmovies: Array<Object>,\n\tshowAutocomplete: boolean, \n\tonInputChange: (arg: string) => void, \n\tuserInput: string\n}\n\n\n\n\nconst Autocomplete = ({ movies, showAutocomplete, onInputChange, userInput } : Params) => {\n\t// Define index of selected suggestion\n\tlet [ activeSuggestion, setActiveSuggestion ] = useState(0);\n\t// Match user's input\n\tlet [ filteredSuggestion, setFilteredSuggestion ] = useState<Array<Object>>([]);\n\t// Determines if the suggestion list appears\n\tlet [ showSuggestions, setShowSuggestions ] = useState(false);\n\n\tconst onChange = (event: React.FormEvent<HTMLInputElement>) :void => {\n\t\tconst suggestions = movies;\n\t\t// Making the component controlled\n\t\tonInputChange(event.currentTarget.value);\n\n\t\t// Go trough all the suggestions, filter out those that do not match users input and return a new array containing those suggestions that do\n\t\tconst filteredSuggestions = suggestions.filter((suggestion) => {\n\t\t\t// Return  every element that matches the pattern (users input)\n\t\t\treturn suggestion.title.toLowerCase().indexOf(userInput.toLowerCase()) > -1;\n\t\t});\n\n\t\tsetActiveSuggestion(0);\n\t\tsetFilteredSuggestion(filteredSuggestions);\n\t\tsetShowSuggestions(true);\n\t\tonInputChange(event.currentTarget.value);\n\t};\n\n\tconst onClick = (event: React.MouseEvent<HTMLElement>) => {\n\t\tsetFilteredSuggestion([]);\n\t\tsetShowSuggestions(false);\n\t\tonInputChange(event.currentTarget.innerText);\n\t};\n\n\tconst onKeyDown = (event: React.KeyboardEvent<HTMLElement> ) => {\n\t\t// If the user presses \"Enter\"\n\t\tif (event.keyCode === 13) {\n\t\t\tsetShowSuggestions(false);\n\t\t\tonInputChange(filteredSuggestion[activeSuggestion].title);\n\t\t\t// If the user presses the \"Up\" arrow\n\t\t} else if (event.keyCode === 38) {\n\t\t\tif (activeSuggestion === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tsetActiveSuggestion(--activeSuggestion);\n\t\t\t// If the user presses the \"Down\" arrow\n\t\t} else if (event.keyCode === 40) {\n\t\t\tif (activeSuggestion - 1 === filteredSuggestion.length) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tsetActiveSuggestion(++activeSuggestion);\n\t\t}\n\t};\n\n\tconst renderContent = () => {\n\t\tif (showAutocomplete) {\n\t\t\treturn (\n\t\t\t\t<SuggestionList\n\t\t\t\t\tshowSuggestions={showSuggestions}\n\t\t\t\t\tuserInput={userInput}\n\t\t\t\t\tfilteredSuggestion={filteredSuggestion}\n\t\t\t\t\tonClick={onClick}\n\t\t\t\t\tactiveSuggestion={activeSuggestion}\n\t\t\t\t/>\n\t\t\t);\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t};\n\n\tconst onFormSubmit = (event: React.FormEvent<EventTarget>): void => {\n\t\tevent.preventDefault();\n\t};\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<form onSubmit={onFormSubmit}>\n\t\t\t\t<input\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tonChange={onChange}\n\t\t\t\t\tonKeyDown={onKeyDown}\n\t\t\t\t\tvalue={userInput}\n\t\t\t\t\tplaceholder=\"Search for Movies\"\n\t\t\t\t\tid=\"searchBar\"\n\t\t\t\t\tautoComplete=\"off\"\n\t\t\t\t/>\n\t\t\t</form>\n\t\t\t{renderContent()}\n\t\t</React.Fragment>\n\t);\n};\n\nexport default Autocomplete;\n","import React, { useRef } from 'react';\nimport { useOutsideAlerter } from '../../hooks/helpers';\n\n\ninterface Params {\n\tchildren: React.ReactNode\n\thideAutocomplete: (condition:string) => void, \n\t\n\t\n}\n\n\nconst OutsideAlerter = ({ children, hideAutocomplete }: Params) => {\n\tconst wrapperRef = useRef<HTMLDivElement>(null);\n\tuseOutsideAlerter(wrapperRef, hideAutocomplete);\n\treturn <div ref={wrapperRef}>{children}</div>;\n};\n\nexport default OutsideAlerter;\n","import { useState, useEffect, RefObject } from 'react';\nimport ghibli from '../api/ghibli';\nimport youtube from '../api/youtube';\nimport {Object} from '../components/Autocomplete';\nconst KEY = process.env.REACT_APP_YOUTUBE_API;\n\n\nconst useOutsideAlerter = (ref: RefObject<HTMLDivElement>, hideAutocomplete: (arg : string) => void) => {\n\tuseEffect(\n\t\t() => {\n\t\t\tconst handleClickOuside = (event: MouseEvent) => {\n\t\t\t\tif (ref.current && !ref.current.contains(event.target as HTMLDivElement)) {\n\t\t\t\t\thideAutocomplete('hide');\n\t\t\t\t} else {\n\t\t\t\t\thideAutocomplete('show');\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tdocument.addEventListener('mousedown', handleClickOuside);\n\t\t},\n\t\t[ ref, hideAutocomplete ]\n\t);\n};\n\nconst useGhibli = (term: string): [Object[], () => void] => {\n\tconst [ movies, setMovies ] = useState([]);\n\tuseEffect(() => {\n\t\tsearchGhibli();\n\t}, []);\n\n\tconst searchGhibli = async () => {\n\t\tconst response = await ghibli(term);\n\t\tsetMovies(response.data);\n\t};\n\n\treturn [ movies, searchGhibli ];\n};\n\nconst useVideos = (term: string) => {\n\tconst [ videos, setVideos ] = useState('');\n\n\tuseEffect(\n\t\t() => {\n\t\t\tsearch(term);\n\t\t},\n\t\t[ term ]\n\t);\n\n\tconst search = async (term: string) => {\n\t\tconst response = await youtube.get('search', {\n\t\t\tparams: {\n\t\t\t\tq: term,\n\t\t\t\tpart: 'snippet',\n\t\t\t\ttype: 'video',\n\t\t\t\tmaxResults: 1,\n\t\t\t\tkey: KEY\n\t\t\t}\n\t\t});\n\t\tsetVideos(response.data.items);\n\t};\n\n\treturn [ videos, search ];\n};\n\nexport { useOutsideAlerter, useGhibli, useVideos };\n","import React from 'react';\nimport Autocomplete from '../Autocomplete';\nimport OutsideAlerter from '../OutsideAlerter/OutsideAlerter';\nimport { Params} from '../Autocomplete';\n\ninterface newParams extends Params {\n\thideAutocomplete: (condition: string) => void\n}\n\nconst SearchBar = ({ movies, showAutocomplete, hideAutocomplete, onInputChange, userInput }: newParams) => {\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<OutsideAlerter hideAutocomplete={hideAutocomplete}>\n\t\t\t\t<Autocomplete\n\t\t\t\t\tmovies={movies}\n\t\t\t\t\tshowAutocomplete={showAutocomplete}\n\t\t\t\t\tonInputChange={onInputChange}\n\t\t\t\t\tuserInput={userInput}\n\t\t\t\t/>\n\t\t\t</OutsideAlerter>\n\t\t</React.Fragment>\n\t);\n};\n\nexport default SearchBar;\n","import React from 'react';\nimport SearchBar from '../SearchBar';\nimport {Params} from '../Autocomplete';\n\ninterface newParams extends Params {\n\thideAutocomplete: (condition: string) => void\n}\n\n\n\nconst Header = ({movies, showAutocomplete, hideAutocomplete, onInputChange, userInput}: newParams) => {\n\treturn (\n\t\t<header>\n\t\t\t<div>\n\t\t\t\t<h1>Ghibli World</h1>\n\t\t\t</div>\n\t\t\t<SearchBar movies={movies}\n\t\t\t\t\tshowAutocomplete={showAutocomplete}\n\t\t\t\t\thideAutocomplete={hideAutocomplete}\n\t\t\t\t\tonInputChange={onInputChange}\n\t\t\t\t\tuserInput={userInput} />\n\t\t</header>\n\t);\n};\n\nexport default Header;\n","import React from 'react';\n\nconst Footer = () => {\n\treturn (\n\t\t<footer>\n\t\t\t<hr />\n\t\t</footer>\n\t);\n};\n\nexport default Footer;\n","import React from 'react';\nimport Header from '../Header';\nimport Footer from '../Footer';\nimport {Params} from '../Autocomplete';\n\n\ninterface newParams extends Params {\n\tchildren: React.ReactNode,\n\thideAutocomplete: (condition: string) => void\n}\n\nconst Layout  = ({movies, showAutocomplete, hideAutocomplete, onInputChange, userInput, children }: newParams) => {\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<Header movies={movies}\n\t\t\t\t\tshowAutocomplete={showAutocomplete}\n\t\t\t\t\thideAutocomplete={hideAutocomplete}\n\t\t\t\t\tonInputChange={onInputChange}\n\t\t\t\t\tuserInput={userInput} />\n\t\t\t<main>{children}</main>\n\t\t\t<Footer />\n\t\t</React.Fragment>\n\t);\n};\n\nexport default Layout;\n","import React from 'react';\nimport { useVideos } from '../../hooks/helpers';\n\nconst MovieTrailer = ({ userInput }: {userInput: string}) => {\n\t// const [ response, search ] = useVideos(`${userInput} trailer`);\n\tconst response = 'yaha';\n\tif (response) {\n\t\tconst video = response[0];\n\t\t// const { videoId, snippet } = video;\n\t\treturn (\n\t\t\t// <iframe\n\t\t\t// \twidth=\"560\"\n\t\t\t// \theight=\"315\"\n\t\t\t// \tsrc={`https://www.youtube.com/embed/${videoId}`}\n\t\t\t// \tframeBorder=\"0\"\n\t\t\t// \tallow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n\t\t\t// \tallowFullScreen\n\t\t\t// \ttitle={snippet.title}\n\t\t\t// />\n\t\t\t<iframe\n\t\t\t\twidth=\"560\"\n\t\t\t\theight=\"315\"\n\t\t\t\tsrc=\"https://www.youtube.com/embed/bskgNOXbdiE\"\n\t\t\t\tframeBorder=\"0\"\n\t\t\t\tallow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n\t\t\t\tallowFullScreen\n\t\t\t\ttitle=\"Placeholder iframe\"\n\t\t\t/>\n\t\t);\n\t}\n\n\treturn <div>Movie Trailer: {userInput}</div>;\n};\n\nexport default MovieTrailer;\n","import React from 'react';\nimport MovieTrailer from '../MovieTrailer';\nimport {Object} from '../Autocomplete';\n\ninterface Params {\n\tuserInput: string, \n\tmovies: Array<Object>\n}\n\nconst MovieDetails = ({ userInput, movies }: Params) => {\n\tconst [ selectedMovie ] = movies.filter((movie) => {\n\t\treturn movie.title === userInput;\n\t});\n\n\tif (selectedMovie) {\n\t\tconst { title, release_date, director, rt_score, producer, description } = selectedMovie;\n\t\treturn (\n\t\t\t<div className=\"movie-details\">\n\t\t\t\t<div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<h2>{title}</h2>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<h3>{rt_score} <span>/ 10</span></h3>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<MovieTrailer userInput={userInput} />\n\t\t\t\t<p>{`${description.slice(0, 250)}...`} <a href={`https://en.wikipedia.org/wiki/${title}`}target=\"_blank\" rel=\"noreferrer\">Read More</a></p>\n\t\t\t\t<div>\n\t\t\t\t\t<p>Director: {director}</p>\n\t\t\t\t\t<p>Producer: {producer}</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t} else {\n\t\treturn <h4>Select a Movie</h4>;\n\t}\n};\n\nexport default MovieDetails;\n","import React, { useState } from 'react';\nimport { useGhibli } from '../../hooks/helpers';\n\nimport Layout from '../Layout';\nimport MovieDetails from '../MovieDetails/MovieDetails';\n\n\nconst App = () => {\n\tconst  [ movies ]  = useGhibli('films');\n\tconst [ showAutocomplete, setShowAutocomplete ] = useState(true);\n\tconst [ userInput, setUserInput ] = useState('Ponyo');\n\n\tconst hideAutocomplete = (condition: string) => {\n\t\tif (condition === 'show') {\n\t\t\tsetShowAutocomplete(true);\n\t\t} else {\n\t\t\tsetShowAutocomplete(false);\n\t\t}\n\t};\n\n\tconst onInputChange = (input: string) => {\n\t\tsetUserInput(input);\n\t};\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<Layout movies={movies}\n\t\t\t\t\tshowAutocomplete={showAutocomplete}\n\t\t\t\t\thideAutocomplete={hideAutocomplete}\n\t\t\t\t\tonInputChange={onInputChange}\n\t\t\t\t\tuserInput={userInput}>\n\t\t\n\t\t\t\t<MovieDetails userInput={userInput} movies={movies} />\n\t\t\t</Layout>\n\t\t</React.Fragment>\n\t);\n};\n\nexport default App;\n","import React from 'react';\nimport { render } from 'react-dom';\nimport App from './components/App';\n\nrender(\n\t<React.Fragment>\n\t\t<App />\n\t</React.Fragment>,\n\tdocument.getElementById('root')\n);\n"],"sourceRoot":""}